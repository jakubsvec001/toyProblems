"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.totalHeight = exports.isLarger = void 0;
exports.isLarger = (current, target) => {
    let isLarger = true;
    current.forEach((currDim, i) => {
        if (currDim >= target[i]) {
            isLarger = false;
        }
    });
    return isLarger;
};
exports.totalHeight = (stack) => {
    let total = 0;
    stack.forEach((arr) => {
        total += arr[2];
    });
    return total;
};
const diskStacking = (inputArray) => {
    let maxHeight = -Infinity;
    let maxStack = [];
    const traverse = (stack) => {
        let nextSelection = inputArray[0];
        if (!stack.length) {
            inputArray.forEach((arr) => {
                traverse([arr]);
            });
        }
        else {
            nextSelection = undefined;
            const lastStackItem = stack[stack.length - 1];
            inputArray.forEach((target) => {
                if (exports.isLarger(lastStackItem, target)) {
                    nextSelection = target;
                }
                if (nextSelection) {
                    traverse([...stack, nextSelection]);
                }
                else {
                    const height = exports.totalHeight(stack);
                    if (height > maxHeight) {
                        maxHeight = height;
                        maxStack = stack;
                    }
                }
            });
        }
    };
    traverse([]);
    return maxStack;
};
const diskStackingDynamic = (disks) => {
    disks.sort((a, b) => a[2] - b[2]);
    const heights = disks.map(disk => disk[2]);
    const sequences = new Array(disks.length);
    let maxHeightIdx = 0;
    for (let leadIdx = 1; leadIdx < disks.length; leadIdx += 1) {
        const leadDisk = disks[leadIdx];
        for (let trailIdx = 0; trailIdx < leadIdx; trailIdx += 1) {
            const trailDisk = disks[trailIdx];
            if (areValidDimensions(trailDisk, leadDisk)) {
                if (heights[leadIdx] <= leadDisk[2] + heights[trailIdx]) {
                    heights[leadIdx] = leadDisk[2] + heights[trailIdx];
                    sequences[leadIdx] = trailIdx;
                }
            }
        }
        if (heights[leadIdx] >= heights[maxHeightIdx])
            maxHeightIdx = leadIdx;
    }
    return buildSequence(disks, sequences, maxHeightIdx);
};
function areValidDimensions(a, b) {
    return a[0] < b[0] && a[1] < b[1] && a[2] < b[2];
}
function buildSequence(arr, seqs, currIdx) {
    const seq = [];
    while (currIdx !== undefined) {
        seq.unshift(arr[currIdx]);
        currIdx = seqs[currIdx];
    }
    return seq;
}
console.log(diskStackingDynamic([[2, 1, 2], [3, 2, 3], [2, 2, 8], [2, 3, 4], [1, 3, 1], [4, 4, 5]]));
exports.default = diskStacking;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlza1N0YWNraW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGlza1N0YWNraW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFhLFFBQUEsUUFBUSxHQUFHLENBQUMsT0FBZ0IsRUFBRSxNQUFlLEVBQUUsRUFBRTtJQUM1RCxJQUFJLFFBQVEsR0FBVyxJQUFJLENBQUM7SUFDNUIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUM3QixJQUFJLE9BQU8sSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDeEIsUUFBUSxHQUFHLEtBQUssQ0FBQztTQUNsQjtJQUNILENBQUMsQ0FBQyxDQUFBO0lBQ0YsT0FBTyxRQUFRLENBQUM7QUFDbEIsQ0FBQyxDQUFBO0FBRVksUUFBQSxXQUFXLEdBQUcsQ0FBQyxLQUFnQixFQUFFLEVBQUU7SUFDOUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBQyxFQUFFO1FBQ25CLEtBQUssSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDakIsQ0FBQyxDQUFDLENBQUE7SUFDRixPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQTtBQUVELE1BQU0sWUFBWSxHQUFHLENBQUMsVUFBcUIsRUFBYSxFQUFFO0lBQ3hELElBQUksU0FBUyxHQUFHLENBQUMsUUFBUSxDQUFDO0lBQzFCLElBQUksUUFBUSxHQUFjLEVBQUUsQ0FBQztJQUM3QixNQUFNLFFBQVEsR0FBRyxDQUFDLEtBQWdCLEVBQUUsRUFBRTtRQUVwQyxJQUFJLGFBQWEsR0FBc0IsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXJELElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ2pCLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUMsRUFBRTtnQkFDeEIsUUFBUSxDQUFDLENBQUMsR0FB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